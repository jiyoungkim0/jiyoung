try.github.io/levels/1/challenges/2

1.Hello world :  패키지 없이 컴파일 하는 방법
2.turtle : 패키지 구조 가지고 컴파일 하는 거
3.turtledemomain : 다른 사람꺼 가지고 와서 컴파일 하는 거
  >>>import 라이브러리 ; 다른 사람이 만든 라이브러리를 쓰는 것
        package com.sd.turtle 이 주소

명령프롬프트에서 컴파일 하는 거
javac -d classes -sourcepath src -cp lib\aplu5.jar src\com\sd\turtle\TurtleDemoMain.java

*디렉토시 표시
리눅스 / , 윈도우 \


160314

1.디자인패턴 왜 배워야하나?
2.좋은 소프트웨어는? 그 예제2개 .. 왜 좋은 소프트웨어인지 생각해보기(Duck, 정렬)

좋은 소프트웨어
; 사람 중심의 프로그래밍, 
컴퓨터가 실행하기 좋은 프로그래밍이 아니고 사람이 이해하기 좋은 프로그래밍

세가지 질문(항상 확인하기!)
1. smell ; 냄새가 나나? 날까? > 자바플밍에서 문제가 있는 부분을 보통 "냄새가 난다."라고 말함
2. 해결방법 > 여러 대안이 있다.
3. 해결해서 좋아졌는지?

소스코드를 만들었다> 집에 가는데 태양의 후예를 못 봄> (디엠비 올 택시)>(기준; 문제해결과 절약)> 디엠비로 본다!
문제가 있고, 해결 방법들이 있는데 선택된 해결방법이 문제를 해결해줬는지?

키워드; SW crisis > 1968 나토 학회에서 처음 사용됨, 사람중심으로!
(공책 그래프)
건축에 비유 ; 집을 잘 지어야 하고, 비용과 날짜도 중요
ISO/ICE. 9126 (외워) 
소프트웨어 품질은 정해진 시간에, 정해진 비용으로, 정해진 기능을 할 수 있냐

소프트웨어 대형화 > 협업! (나누어서 통합) > SW는 나누는 게 기술.
심각성 > 눈에 안보여서 

이 과목의 목적; 좋은 소프트웨어 만들기; 사람 중심!

좋은 소프트웨어 1. 내가 하는 작업 faster & better 

수명 짧게 하는 이유; 중복!!! 

소프트웨어 좋게 만든다? 좋은 생각! 프로의식!(직업윤리)

상속 사용해서는 안되는 경우?

overriding vs overloading

다형성(상속 중에서도 다형성을 써야함)
; 상속을 쓰는 이유☆
; 프로그래밍 컴파일시점과 실행시점이 있음
; 컴파일시점(넓은 범위), 실행시점(좁은 범위, 자식 클래스들이 여러개 있을 수 있음) >> 이걸 다형적이라고 말함
다형적; 컴파일 시점에는 슈퍼클래스, 런타임에는 섭클래스를 쓴다

www.planttext.com/planttext : 온라인에서 제공하는 plantuml 사이트
>>업캐스팅, 다운캐스팅 알려주려고
   첫째줄; 클래스명, 둘째줄; 속성, 셋째줄; 함수들
   함수 앞에 + : 퍼블릭, -:프라이빗, #: 프로텍티드 (가시성)

WeightTurtle 컴파일
javac -d classes -cp lib\aplu5.jar -sourcepath src src\com\sd\turtle\WeightTurtle.java